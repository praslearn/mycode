trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  resourceGroupName: 'myResourceGroup'  # Replace with your Resource Group
  imageGalleryName: 'myImageGallery'    # Replace with your Image Gallery name
  imageDefinitionName: 'myImageDef'     # Replace with your Image Definition name
  imageVersion: '1.0.0'                 # Replace with your Image Version
  location: 'eastus'                    # Replace with your Location
  storageAccountName: 'mystorageacct'   # Replace with your Storage Account
  customScriptPath: 'custom-script.ps1' # Replace with your PowerShell script path

steps:

# Checkout the code repository
- checkout: self

# Upload the custom script to the storage account
- task: AzureCLI@2
  inputs:
    azureSubscription: 'MyServiceConnection'   # Service connection name
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      az storage blob upload \
        --account-name $(storageAccountName) \
        --container-name imagescripts \
        --name $(customScriptPath) \
        --file $(customScriptPath)

# Azure Image Builder Task to create the custom image using Windows Server 2019
- task: AzureImageBuilder@0
  inputs:
    azureSubscription: 'MyServiceConnection'   # Service connection name
    resourceGroupName: $(resourceGroupName)
    location: $(location)
    buildTimeoutInMinutes: 120
    imageTemplate:
      imageTemplateName: 'windowsImageTemplate' # Image Template name
      source:
        type: 'PlatformImage'                   # Using platform (marketplace) image
        imageReference:
          publisher: 'MicrosoftWindowsServer'
          offer: 'WindowsServer'
          sku: '2019-Datacenter'
          version: 'latest'
      customize:
        - type: 'powershell'                    # Use PowerShell script for customization
          scriptUri: 'https://$(storageAccountName).blob.core.windows.net/imagescripts/$(customScriptPath)'  # Custom PowerShell script uploaded to storage
      distribute:
        - type: 'SharedImageGallery'
          galleryImageId: '/subscriptions/<subscription-id>/resourceGroups/$(resourceGroupName)/providers/Microsoft.Compute/galleries/$(imageGalleryName)/images/$(imageDefinitionName)'
          replicationRegions:
            - $(location)
          imageVersion: $(imageVersion)

# Publish build artifacts (optional)
- publish: $(Build.ArtifactStagingDirectory)
  artifact: images
