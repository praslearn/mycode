linux-image-builder-template.json:

{
  "type": "Microsoft.VirtualMachineImages/imageTemplates",
  "apiVersion": "2022-07-01",
  "location": "eastus",
  "properties": {
    "buildTimeoutInMinutes": 60,
    "vmProfile": {
      "vmSize": "Standard_D2s_v3"
    },
    "source": {
      "type": "PlatformImage",
      "publisher": "Canonical",
      "offer": "UbuntuServer",
      "sku": "18.04-LTS",
      "version": "latest"
    },
    "customize": [
      {
        "type": "Shell",
        "name": "InstallApp",
        "scriptUri": "{{linuxScriptPath}}"
      }
    ],
    "distribute": [
      {
        "type": "GalleryImageVersion",
        "galleryImageId": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.Compute/galleries/<gallery-name>/images/<linux-image-definition>",
        "location": ["eastus"],
        "replicationRegions": ["westus"],
        "excludeFromLatest": false,
        "osType": "Linux",
        "runOutputName": "linuxImageOutput"
      }
    ]
  }
}


=====

windows-image-builder-template.json:{
  "type": "Microsoft.VirtualMachineImages/imageTemplates",
  "apiVersion": "2022-07-01",
  "location": "eastus",
  "properties": {
    "buildTimeoutInMinutes": 60,
    "vmProfile": {
      "vmSize": "Standard_D2s_v3"
    },
    "source": {
      "type": "PlatformImage",
      "publisher": "MicrosoftWindowsServer",
      "offer": "WindowsServer",
      "sku": "2019-Datacenter",
      "version": "latest"
    },
    "customize": [
      {
        "type": "PowerShell",
        "name": "InstallApp",
        "scriptUri": "{{windowsScriptPath}}"
      }
    ],
    "distribute": [
      {
        "type": "GalleryImageVersion",
        "galleryImageId": "/subscriptions/<subscription-id>/resourceGroups/<resource-group>/providers/Microsoft.Compute/galleries/<gallery-name>/images/<windows-image-definition>",
        "location": ["eastus"],
        "replicationRegions": ["westus"],
        "excludeFromLatest": false,
        "osType": "Windows",
        "runOutputName": "windowsImageOutput"
      }
    ]
  }
}



=======
azure-pipelines.yml :

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

# Pipeline parameters to select which image to build
parameters:
- name: imageType
  displayName: 'Select Image Type to Build'
  type: string
  default: 'Linux'
  values:
  - Linux
  - Windows

variables:
  resourceGroupName: 'your-resource-group'
  location: 'eastus'
  linuxImageTemplateName: 'linuxImageTemplate'
  windowsImageTemplateName: 'windowsImageTemplate'
  linuxTemplateFile: 'linux-image-builder-template.json'
  windowsTemplateFile: 'windows-image-builder-template.json'
  linuxScriptPath: '$(Build.SourcesDirectory)/scripts/install_linux.sh'
  windowsScriptPath: '$(Build.SourcesDirectory)/scripts/install_windows.ps1'

steps:

# Checkout the repository to access the JSON template and scripts
- task: Checkout@2
  inputs:
    clean: true

# Conditionally build and distribute the Linux image
- script: |
    echo "Replacing Linux script path in JSON template..."
    sed -i 's|{{linuxScriptPath}}|'$linuxScriptPath'|g' $(linuxTemplateFile)
  condition: eq('${{ parameters.imageType }}', 'Linux')

- task: AzureCLI@2
  displayName: 'Create Linux Image Template'
  condition: eq('${{ parameters.imageType }}', 'Linux')
  inputs:
    azureSubscription: 'AzureSPConnection'  # Replace with your SP connection
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Creating resource group for Linux..."
      az group create --name $(resourceGroupName) --location $(location)

      echo "Creating Linux Image Builder template..."
      az resource create \
        --resource-group $(resourceGroupName) \
        --properties @$(linuxTemplateFile) \
        --is-full-object \
        --resource-type Microsoft.VirtualMachineImages/imageTemplates \
        --name $(linuxImageTemplateName)

      echo "Running Linux image build..."
      az resource invoke-action \
        --resource-group $(resourceGroupName) \
        --action Run \
        --resource-type Microsoft.VirtualMachineImages/imageTemplates \
        --name $(linuxImageTemplateName)

# Conditionally build and distribute the Windows image
- script: |
    echo "Replacing Windows script path in JSON template..."
    sed -i 's|{{windowsScriptPath}}|'$windowsScriptPath'|g' $(windowsTemplateFile)
  condition: eq('${{ parameters.imageType }}', 'Windows')

- task: AzureCLI@2
  displayName: 'Create Windows Image Template'
  condition: eq('${{ parameters.imageType }}', 'Windows')
  inputs:
    azureSubscription: 'AzureSPConnection'  # Replace with your SP connection
    scriptType: 'bash'
    scriptLocation: 'inlineScript'
    inlineScript: |
      echo "Creating resource group for Windows..."
      az group create --name $(resourceGroupName) --location $(location)

      echo "Creating Windows Image Builder template..."
      az resource create \
        --resource-group $(resourceGroupName) \
        --properties @$(windowsTemplateFile) \
        --is-full-object \
        --resource-type Microsoft.VirtualMachineImages/imageTemplates \
        --name $(windowsImageTemplateName)

      echo "Running Windows image build..."
      az resource invoke-action \
        --resource-group $(resourceGroupName) \
        --action Run \
        --resource-type Microsoft.VirtualMachineImages/imageTemplates \
        --name $(windowsImageTemplateName)


=========

install_linux.sh
#!/bin/bash
sudo apt-get update
sudo apt-get install -y nginx

-=---
install_windows.ps1

# PowerShell script to install IIS
Install-WindowsFeature -name Web-Server -IncludeManagementTools
